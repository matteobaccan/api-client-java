/*
 * ðŸ˜¸ Cheshire-Cat API
 * Customizable AI architecture
 *
 * The version of the OpenAPI document: 0.0.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package it.baccan.cheshirecat.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import it.baccan.cheshirecat.model.CollectionData;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import it.baccan.cheshirecat.JSON;

/**
 * VectorsData
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.4.0")
public class VectorsData {
  public static final String SERIALIZED_NAME_EMBEDDER = "embedder";
  @SerializedName(SERIALIZED_NAME_EMBEDDER)
  private String embedder;

  public static final String SERIALIZED_NAME_COLLECTIONS = "collections";
  @SerializedName(SERIALIZED_NAME_COLLECTIONS)
  private Map<String, List<CollectionData>> collections = new HashMap<>();

  public VectorsData() {
  }

  public VectorsData embedder(String embedder) {
    this.embedder = embedder;
    return this;
  }

   /**
   * Get embedder
   * @return embedder
  **/
  @javax.annotation.Nonnull
  public String getEmbedder() {
    return embedder;
  }

  public void setEmbedder(String embedder) {
    this.embedder = embedder;
  }


  public VectorsData collections(Map<String, List<CollectionData>> collections) {
    this.collections = collections;
    return this;
  }

  public VectorsData putCollectionsItem(String key, List<CollectionData> collectionsItem) {
    if (this.collections == null) {
      this.collections = new HashMap<>();
    }
    this.collections.put(key, collectionsItem);
    return this;
  }

   /**
   * Get collections
   * @return collections
  **/
  @javax.annotation.Nonnull
  public Map<String, List<CollectionData>> getCollections() {
    return collections;
  }

  public void setCollections(Map<String, List<CollectionData>> collections) {
    this.collections = collections;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VectorsData vectorsData = (VectorsData) o;
    return Objects.equals(this.embedder, vectorsData.embedder) &&
        Objects.equals(this.collections, vectorsData.collections);
  }

  @Override
  public int hashCode() {
    return Objects.hash(embedder, collections);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VectorsData {\n");
    sb.append("    embedder: ").append(toIndentedString(embedder)).append("\n");
    sb.append("    collections: ").append(toIndentedString(collections)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("embedder");
    openapiFields.add("collections");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("embedder");
    openapiRequiredFields.add("collections");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to VectorsData
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!VectorsData.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in VectorsData is not found in the empty JSON string", VectorsData.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!VectorsData.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `VectorsData` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : VectorsData.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("embedder").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `embedder` to be a primitive type in the JSON string but got `%s`", jsonObj.get("embedder").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!VectorsData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'VectorsData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<VectorsData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(VectorsData.class));

       return (TypeAdapter<T>) new TypeAdapter<VectorsData>() {
           @Override
           public void write(JsonWriter out, VectorsData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public VectorsData read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of VectorsData given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of VectorsData
  * @throws IOException if the JSON string is invalid with respect to VectorsData
  */
  public static VectorsData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, VectorsData.class);
  }

 /**
  * Convert an instance of VectorsData to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


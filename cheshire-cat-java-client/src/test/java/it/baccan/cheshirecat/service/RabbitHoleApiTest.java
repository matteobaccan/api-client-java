/*
 * ðŸ˜¸ Cheshire-Cat API
 * Customizable AI architecture
 *
 * The version of the OpenAPI document: 0.0.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package it.baccan.cheshirecat.service;

import it.baccan.cheshirecat.ApiException;
import it.baccan.cheshirecat.model.BodyUploadUrl;
import java.io.File;
import it.baccan.cheshirecat.model.FileResponse;
import it.baccan.cheshirecat.model.HTTPValidationError;
import it.baccan.cheshirecat.model.ResponseGetAllowedMimetypes;
import it.baccan.cheshirecat.model.WebResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for RabbitHoleApi
 */
@Disabled
public class RabbitHoleApiTest {

    private final RabbitHoleApi api = new RabbitHoleApi();

    /**
     * Get Allowed Mimetypes
     *
     * Retrieve the allowed mimetypes that can be ingested by the Rabbit Hole
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAllowedMimetypesTest() throws ApiException {
        ResponseGetAllowedMimetypes response = api.getAllowedMimetypes();
        // TODO: test validations
    }

    /**
     * Upload File
     *
     * Upload a file containing text (.txt, .md, .pdf, etc.). File content will be extracted and segmented into chunks. Chunks will be then vectorized and stored into documents memory.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void uploadFileTest() throws ApiException {
        File _file = null;
        FileResponse response = api.uploadFile(_file);
        // TODO: test validations
    }

    /**
     * Upload Memory
     *
     * Upload a memory json file to the cat memory
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void uploadMemoryTest() throws ApiException {
        File _file = null;
        Object response = api.uploadMemory(_file);
        // TODO: test validations
    }

    /**
     * Upload URL
     *
     * Upload a URL. Website content will be extracted and segmented into chunks. Chunks will be then vectorized and stored into documents memory.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void uploadUrlTest() throws ApiException {
        BodyUploadUrl bodyUploadUrl = null;
        WebResponse response = api.uploadUrl(bodyUploadUrl);
        // TODO: test validations
    }

}
